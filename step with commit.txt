I. section 2: setup ( commit 1. khởi tạo file ban đầu)
1. Sau khi cài đặt create-react-app
- copy folder assets từ đầu bài vào src
- trong src: + xóa App.css
	+ App.test.js
	+ logo.svg
	+ reportWebVitals.js
	+ setupTets.js
+ Sửa App.js, index.js
2. thay đổi tiltle ở index.html ( ở public)
-  thay luôn cái logo ( file favicon.ico) => tìm cái đuôi .ico thay vào tên phải là favicon giống ban đầu https://favicon.io/
3. nomalize.css : File để reset lại tất cả css mặc định
- import vào file index.js ( trong src)

II. section 3: Landing Page( commit 2. khởi tạo file ban đầu)
1. giới thiệu về tạo css kiểu dùng 1 thư viện mới : styled-components": "^5.3.3"

III. section 4: First Components ( )
- hiểu về hình ảnh logo.svg trong react
- tạo 1 file logo componet để import vào các file sử dụng
+ tạo 1 flle index file này sẽ được import các file có nhiều logic, sau đó sử dụng lại nó sẽ ngắn hơn NHỚ export {} không có deufault

section 5: Router V6 ( )
- Bản chất giống với các V thấp, thay Switch = Routes
- Tại folder page tạo các file Register, Dashboar, Error, index import tất cả vào file index rồi từ index export ra để sử dụng ở App

section 6: Error page
- xử lý hiển thị trang 404 

section 7: Register Page
- Tạo form đăng ký
- Dùng Hook để lấy dữ liệu (useEffect, useState)
- Tạo 1 file formRow đẩy các input vào rồi dùng props để nhận giá trị name, value, type, handleChange
=> sau đó export để nhận các giá trị từ file Register
- Tạo thông báo lỗi ở trên đầu khi mà dính validation 
+ Tạo thêm file Alert để hiển thị lỗi trên ( trong components)
+ Tại initialState thêm cho nó showAlert: false tức là kiểm tra nếu có thì hiện
- Dùng isMember để kiểm tra nếu có chuyển form Login còn chưa có thì form Register
+ Dùng dạng Toggle kích là set lại cái giá trị của isMember

Section 8: React Hooks React Context
- Sử dụng createContext, useContext, useReducer để làm tiếp bài
- Hiển thị Alert, remove nó sau 5s, 
- Chú ý những cái config file,sau có gặp phải làm cho gọn gàng

Section 20: config lại dashboard trong page
- Thêm 1 folder dashboard trong page ( tạo 5 file  để hiện thị)
- Ở file App, tạo 1 route để định hướng các page ( 5 page trên)
- Tạo 1 ProtectRoutes.JS ở trong page, tạo logic trong đó khi mà chưa có user thì sẽ chuyển hướng hết về Landing
- Bọc ProtectRoutes.js trong file app ( bọc bên ngoài Sharedashbor) ...
- => ở file protectRoutes.js sẽ nhận được children là Sharedasbord
- Nhớ xem đi xem lại nhiều lần vô
- 

SECTION 21:
- Tạo bố cục ở shareLayout (basic) response . . .
+ Thêm file ở component ( Navbar, Bigside, Small )
- Thêm bộ icon ( đã cài rồi dùng thôi ) ở file Navbar

SECTION 22: Xử lý chi tiết Navbar
- Thêm trạng thái cho phần slideBar ( để chung ở action reducer)
- Dùng useCntext để nhận lại fc, khi click vào nó sẽ đổi true false

- Tương tự với dropdown, dung useState để set trạng thái cho logout, khi clic vào
thì nó mới hiện và ẩn

- Làm tiếp với dropdown ( logout) khi click vào nó sẽ xóa dữ liệu trong localStorage
tạo một action và trạng thái mới
- Sửa lại phần lưu localStorage (location): 


SECTION 23: Xử lý Small slidebar
- Tạo 1 folder utils trong đó có 1 file link.js ( Thêm dữ liệu trong đó)
- Trong file smallSlidebar thêm dữ liệu cho nó
- Thêm phần hiển thị nội dung trong modal, rồi các css

SECTION24: Qua phần Bigsidebar
- do phần NavLink sử dụng lại nên sẽ tạo cho nó vào trong 1 cp rồi dùng lại
- Tạo logic trong Bigsidebar cho thanh nó trượt ra vào

SECTION 27: Profile là 1 component update user:
- lấy dữ liệu sau khi đăng nhập, đăng ký, đổ vào các ô cần update

SECTION 28: Cài đặt sử dụng axios
- Cài rồi, có một số cách sử dụng khác thông thường, cố gắng đọc thêm tài liệu

SECTION 29: Update user
- video 125 đến 127
- 125 - 126: Mỗi lần có thay đổi phải tạo action để thông báo, và state phải được cập nhập lại
=> thì Giao diện mới render thay đổi cùng
action -> context -> reducer
127: Lưu ý thông báo khi không có headers thì sẽ gọi hàm logout
- Khi token hết hạn logout để còn đăng nhập lại

SECTION 31: Job model bắt đầu làm phần addjob
- video 131: Thêm cho phần appContext phần khởi tạo ban đầu của addjob
- video 123: Làm ở file addjob

- Chia phần formRowSelect ra làm 1 cp riêng, dùng như inputValue
+ Sử dụng cho 2 ô select là status, và jobType

- video 136: Tạo 1 action handleChange để nhận lại kết quả của các ô input
để khi có sự thay đổi thì giao diện sẽ render lại và cập nhật được kết quả
[action.payload.name]: action.payload.value
cái này để ở reducer như mọi khi là để ở handleChange lấy luôn value input

- video 137: Làm nút clear dữ liệu
+ Logic là vẫn tạo 1 dòng như flux, action ->appContext -> reducer
Khi trở về reducer, phần khởi tạo ban đầu initialSate sẽ để những dữ liệu mà khi 
ấn clear nó hiện về

- video 138: Gioi thiệu về create create job
- video 139: Bắt đầu tạo logic
- vẫn là theo luồng giống redux đi từ action -> appContext -> reducer
- Đã tạo được 1 job từ phía client

SECTION 33: Lấy jobs để hiển thị cho người dùng
- video 141: khởi tạo file ban đầu với dữ liệu là mặc định
- video 142: Lại tạo luồng như flux
+ Lấy được dữ liệu từ server, đã dùng useEffect để test thử
- video 143: Phần logout cần quay lại xem để hiểu rõ hơn
- video 144: allJobs page setup: tạo giao diện ở trang allJobs
+ Tạo 1 số cp để phục vụ việc hiển thị (SearchContainer, Jobcontainer ...)

- video 145: Cho logic vào file JobsContainer
+ Tạo dữ liệu lấy từ appContext, dùng useEffect cẩn thận
-Video 146: Sử dụng thư viện moment

- video 147: Tạo editJob, và delete job ở appContext (nhớ lấy id của từng sp)
- sau đó sẽ xử lý ở phần cp job (đơn)
+ Đã lấy được id khi click vào 2 nut edit và delete, khi clic vào edit
thì chuyển trang về addjob

- video 148:Logic ở jobInfo
+ Hiển thị đẹp hơn

video 149: Tạo logic chi tiết cho phần edit job
- vẫn đi theo cấu trúc flux ( chỉ có set_get_edit trước)

SECTION 36: SỬA XÓA Ở PHÍA client
- video 155: xóa ( vẫn theo flux) => Đã xóa thành công
- video 156: Sửa theo flux ( tạo 3 trạng thái)
+ Đã sửa được job từ phía client




